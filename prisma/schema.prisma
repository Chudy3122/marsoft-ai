generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String?
  email            String   @unique
  password         String
  role             String   @default("user")
  webSearchEnabled Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  chats            Chat[]
  projects         Project[] // Dodaj tę linię
}

model Chat {
  id              String     @id @default(uuid())
  title           String     @default("Nowa konwersacja")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String
  activeDocuments String[]
  user            User       @relation(fields: [userId], references: [id])
  documents       Document[]
  messages        Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String @db.Text 
  role      String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Document {
  id        String   @id @default(uuid())
  title     String
  fileType  String
  content   String?
  pages     Int?
  rows      Int?
  columns   Int?
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())
  chatId    String
  isDefault Boolean  @default(false)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model KnowledgeCategory {
  id            String              @id @default(uuid())
  name          String
  parentId      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  parent        KnowledgeCategory?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories KnowledgeCategory[] @relation("SubCategories")
  documents     KnowledgeDocument[]
}

model KnowledgeDocument {
  id         String            @id @default(uuid())
  title      String
  fileType   String
  content    String
  categoryId String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  category   KnowledgeCategory @relation(fields: [categoryId], references: [id])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  tasks       Task[]
  milestones  Milestone[]

  @@index([userId])
}

model Task {
  id           String       @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  progress     Int          @default(0) // 0-100%
  dependencies String[]     // ID zadań, od których zależy
  projectId    String
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  reminderSent Boolean      @default(false)

  @@index([projectId])
}

model Milestone {
  id          String       @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  completed   Boolean      @default(false)
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reminderSent Boolean     @default(false)

  @@index([projectId])
}