// src/app/api/chats/[chatId]/messages/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from "@/lib/auth";
import prisma from '@/lib/prisma';

export const dynamic = 'force-dynamic';

export async function GET(
  request: NextRequest,
  { params }: { params: { chatId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    const chatId = params.chatId;
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Nie zalogowano' }, { status: 401 });
    }

    // Dodaj szczegÃ³Å‚owe logowanie
    console.log("Pobieranie wiadomoÅ›ci dla czatu:", chatId);
    console.log("ID uÅ¼ytkownika:", session.user.id);

    // SprawdÅº, czy czat naleÅ¼y do zalogowanego uÅ¼ytkownika
    const chat = await prisma.chat.findFirst({
      where: {
        id: chatId,
        userId: session.user.id
      },
      // Wybierz tylko potrzebne pola, aby uniknÄ…Ä‡ problemÃ³w z typami
      select: {
        id: true,
        title: true,
        userId: true
      }
    });

    console.log("Znaleziony czat:", chat ? "Tak" : "Nie");

    if (!chat) {
      console.error(`Czat o ID ${chatId} nie znaleziony lub brak uprawnieÅ„`);
      return NextResponse.json({ error: 'Czat nie znaleziony lub brak uprawnieÅ„' }, { status: 404 });
    }

    // Bezpieczne pobieranie wiadomoÅ›ci z obsÅ‚ugÄ… bÅ‚Ä™dÃ³w
    try {
      const messages = await prisma.message.findMany({
        where: {
          chatId: chatId
        },
        orderBy: {
          createdAt: 'asc'
        },
        select: {  // ðŸ‘ˆ DODAJ select Å¼eby pobraÄ‡ wszystkie pola
          id: true,
          content: true,
          role: true,
          createdAt: true,
          chatId: true,
          metadata: true,  // ðŸ‘ˆ DODAJ
          reasoning: true  // ðŸ‘ˆ DODAJ
        }
      });
      
      console.log(`Pobrano ${messages.length} wiadomoÅ›ci dla czatu ${chatId}`);
      
      return NextResponse.json({ messages });
    } catch (messagesError) {
      console.error('BÅ‚Ä…d podczas pobierania wiadomoÅ›ci:', messagesError);
      return NextResponse.json({ 
        error: 'Problem z pobraniem wiadomoÅ›ci', 
        details: messagesError instanceof Error ? messagesError.message : String(messagesError)
      }, { status: 500 });
    }
  } catch (error) {
    console.error('BÅ‚Ä…d podczas obsÅ‚ugi Å¼Ä…dania wiadomoÅ›ci:', error);
    return NextResponse.json({ 
      error: 'WystÄ…piÅ‚ problem podczas pobierania wiadomoÅ›ci',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: { chatId: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    const chatId = params.chatId;
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Nie zalogowano' }, { status: 401 });
    }

    // SprawdÅº, czy czat naleÅ¼y do zalogowanego uÅ¼ytkownika
    const chat = await prisma.chat.findFirst({
      where: {
        id: chatId,
        userId: session.user.id
      },
      // Wybierz tylko potrzebne pola
      select: {
        id: true, 
        userId: true
      }
    });

    if (!chat) {
      return NextResponse.json({ error: 'Czat nie znaleziony lub brak uprawnieÅ„' }, { status: 404 });
    }

    // Pobierz dane wiadomoÅ›ci
    let messageData;
    try {
      messageData = await request.json();
    } catch (parseError) {
      console.error("BÅ‚Ä…d parsowania JSON:", parseError);
      return NextResponse.json({ error: 'BÅ‚Ä…d parsowania danych wiadomoÅ›ci' }, { status: 400 });
    }
    
    const { content, role, metadata, reasoning } = messageData; // ðŸ‘ˆ DODAJ reasoning
    
    if (!content || !role) {
      return NextResponse.json({ error: 'Brakuje treÅ›ci lub roli wiadomoÅ›ci' }, { status: 400 });
    }

    // Zapisz wiadomoÅ›Ä‡
    const message = await prisma.message.create({
      data: {
        content,
        role,
        chatId,
        metadata: metadata || {}, // ðŸ‘ˆ DODAJ metadata
        reasoning: reasoning || null // ðŸ‘ˆ DODAJ reasoning
      }
    });

    // Aktualizuj datÄ™ ostatniej modyfikacji czatu
    await prisma.chat.update({
      where: { id: chatId },
      data: { updatedAt: new Date() }
    });

    return NextResponse.json({ message });
  } catch (error) {
    console.error('BÅ‚Ä…d podczas zapisywania wiadomoÅ›ci:', error);
    return NextResponse.json({ 
      error: 'WystÄ…piÅ‚ problem podczas zapisywania wiadomoÅ›ci',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}