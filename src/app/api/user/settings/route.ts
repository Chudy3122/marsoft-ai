// src/app/api/user/settings/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import prisma from '@/lib/prisma';

export async function GET(request: NextRequest) {
  // SprawdÅº autentykacjÄ™
  const session = await getServerSession(authOptions);
  if (!session || !session.user?.email) {
    return NextResponse.json({ error: 'Nie jesteÅ› zalogowany.' }, { status: 401 });
  }
  
  try {
    // Pobierz ustawienia uÅ¼ytkownika
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      select: { 
        webSearchEnabled: true,
        extendedReasoningEnabled: true // ðŸ‘ˆ DODAJ TÄ˜ LINIÄ˜
      }
    });
    
    if (!user) {
      return NextResponse.json({ error: 'Nie znaleziono uÅ¼ytkownika.' }, { status: 404 });
    }
    
    return NextResponse.json({
      success: true,
      webSearchEnabled: user.webSearchEnabled,
      extendedReasoningEnabled: user.extendedReasoningEnabled || false // ðŸ‘ˆ DODAJ TÄ˜ LINIÄ˜
    });
  } catch (error) {
    console.error('BÅ‚Ä…d podczas pobierania ustawieÅ„ uÅ¼ytkownika:', error);
    return NextResponse.json({ error: 'WystÄ…piÅ‚ bÅ‚Ä…d podczas pobierania ustawieÅ„.' }, { status: 500 });
  }
}

export async function PUT(request: NextRequest) {
  // SprawdÅº autentykacjÄ™
  const session = await getServerSession(authOptions);
  if (!session || !session.user?.email) {
    return NextResponse.json({ error: 'Nie jesteÅ› zalogowany.' }, { status: 401 });
  }
  
  try {
    const data = await request.json();
    const { webSearchEnabled, extendedReasoningEnabled } = data; // ðŸ‘ˆ DODAJ extendedReasoningEnabled
    
    // Przygotuj obiekt do aktualizacji
    const updateData: any = {};
    
    // SprawdÅº webSearchEnabled
    if (typeof webSearchEnabled === 'boolean') {
      updateData.webSearchEnabled = webSearchEnabled;
    }
    
    // ðŸ‘‡ DODAJ TEN BLOK
    // SprawdÅº extendedReasoningEnabled
    if (typeof extendedReasoningEnabled === 'boolean') {
      updateData.extendedReasoningEnabled = extendedReasoningEnabled;
    }
    
    // SprawdÅº czy mamy coÅ› do aktualizacji
    if (Object.keys(updateData).length === 0) {
      return NextResponse.json({ error: 'NieprawidÅ‚owe parametry.' }, { status: 400 });
    }
    
    // Aktualizuj ustawienia uÅ¼ytkownika
    const user = await prisma.user.update({
      where: { email: session.user.email },
      data: updateData,
      select: { 
        webSearchEnabled: true,
        extendedReasoningEnabled: true // ðŸ‘ˆ DODAJ TÄ˜ LINIÄ˜
      }
    });
    
    return NextResponse.json({
      success: true,
      webSearchEnabled: user.webSearchEnabled,
      extendedReasoningEnabled: user.extendedReasoningEnabled // ðŸ‘ˆ DODAJ TÄ˜ LINIÄ˜
    });
  } catch (error) {
    console.error('BÅ‚Ä…d podczas aktualizacji ustawieÅ„ uÅ¼ytkownika:', error);
    return NextResponse.json({ error: 'WystÄ…piÅ‚ bÅ‚Ä…d podczas aktualizacji ustawieÅ„.' }, { status: 500 });
  }
}