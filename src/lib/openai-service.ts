// src/lib/openai-service.ts
import OpenAI from 'openai';
import type { ChatCompletionMessageParam } from 'openai/resources';

// Inicjalizacja klienta OpenAI z kluczem API
const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true
});

// Definicje funkcji wyszukiwania dla OpenAI
const searchFunctionDefinition = {
  name: "search",
  description: "Wyszukuje informacje w internecie.",
  parameters: {
    type: "object",
    properties: {
      query: {
        type: "string",
        description: "Zapytanie wyszukiwania"
      }
    },
    required: ["query"]
  }
};

const fetchUrlFunctionDefinition = {
  name: "fetch_url",
  description: "Pobiera tre≈õƒá strony internetowej.",
  parameters: {
    type: "object",
    properties: {
      url: {
        type: "string",
        description: "URL strony internetowej do pobrania"
      }
    },
    required: ["url"]
  }
};

/**
 * Funkcja do sprawdzania, czy zapytanie mo≈ºe wymagaƒá wyszukiwania w sieci
 */
function shouldSearchWeb(query: string): boolean {
  console.log(`üîç Sprawdzanie czy zapytanie wymaga wyszukiwania: "${query}"`);
  
  // Wzorce dla zapyta≈Ñ, kt√≥re mogƒÖ wymagaƒá aktualnych informacji
  const searchPatterns = [
    // Wska≈∫niki czasowe
    /\b(aktualne|najnowsze|ostatnie|bie≈ºƒÖce|teraz|dzi≈õ|wczoraj|2024|2025)\b/i,
    
    // Akcje wyszukiwania
    /\b(wyszukaj|znajd≈∫|szukaj|poszukaj|sprawd≈∫|zobacz|dowiedz siƒô)\b/i,
    
    // Informacje internetowe
    /\b(strona|witryna|www|http|link|url)\b/i,
    
    // Terminy i nabory
    /\b(termin|konkurs|nab√≥r|og≈Çoszenie|rekrutacja)\b/i,
    
    // Programy UE i finansowanie
    /\b(program|ue|unijny|europejski|horyzont|erasmus|interreg)\b/i,
    
    // Przepisy i dokumenty
    /\b(rozporzƒÖdzenie|ustawa|dokument|przepis|regulacja)\b/i,
    
    // Dane finansowe i gospodarcze
    /\b(ceny|kurs|gie≈Çda|notowania|inflacja|pkb)\b/i,
    
    // Wydarzenia i aktualno≈õci
    /\b(news|wiadomo≈õci|wydarzenia|konferencja|spotkanie)\b/i,
    
    // Dane kontaktowe i organizacyjne
    /\b(kontakt|adres|telefon|email|siedziba)\b/i
  ];
  
  // Sprawd≈∫, czy zapytanie zawiera URL
  const urlPattern = /https?:\/\/[^\s]+/i;
  const hasUrl = urlPattern.test(query);
  
  if (hasUrl) {
    console.log("‚úÖ Znaleziono URL w zapytaniu - wymaga wyszukiwania");
    return true;
  }
  
  // Sprawd≈∫, czy zapytanie pasuje do wzorc√≥w wyszukiwania
  const matchesPattern = searchPatterns.some(pattern => {
    const matches = pattern.test(query);
    if (matches) {
      console.log(`‚úÖ Zapytanie pasuje do wzorca: ${pattern.source}`);
    }
    return matches;
  });
  
  // Dodatkowe sprawdzenie dla konkretnych fraz
  const specificPhrases = [
    'ile kosztuje',
    'jaka jest cena',
    'gdzie mogƒô',
    'jak siƒô dostaƒá',
    'kiedy jest',
    'czy jest dostƒôpne',
    'aktualny status',
    'najnowsze informacje'
  ];
  
  const matchesSpecificPhrase = specificPhrases.some(phrase => {
    const matches = query.toLowerCase().includes(phrase);
    if (matches) {
      console.log(`‚úÖ Zapytanie zawiera frazƒô wymagajƒÖcƒÖ wyszukiwania: "${phrase}"`);
    }
    return matches;
  });
  
  const shouldSearch = matchesPattern || matchesSpecificPhrase;
  
  console.log(`${shouldSearch ? '‚úÖ' : '‚ùå'} Wynik analizy: ${shouldSearch ? 'WYMAGA' : 'NIE WYMAGA'} wyszukiwania`);
  
  return shouldSearch;
}

/**
 * Pobiera dokument z bazy danych na podstawie ID
 */
async function getDocument(documentId: string): Promise<any> {
  try {
    console.log(`Pobieranie dokumentu o ID: ${documentId}`);
    
    // Poprawny URL do pobrania dokumentu - bezpo≈õrednio z API dokument√≥w
    const response = await fetch(`/api/documents/${documentId}`);
    if (!response.ok) {
      console.error("B≈ÇƒÖd odpowiedzi API:", response.status, response.statusText);
      throw new Error(`Problem z pobraniem dokumentu o ID: ${documentId}`);
    }
    
    const data = await response.json();
    return data.document;
  } catch (error) {
    console.error(`B≈ÇƒÖd podczas pobierania dokumentu ${documentId}:`, error);
    return null;
  }
}

/**
 * Pobieranie tre≈õci dokument√≥w z bazy danych i biblioteki wiedzy
 * POPRAWIONA WERSJA - robi jedno zapytanie dla wszystkich dokument√≥w
 */
async function getDocumentsContent(documentIds: string[]): Promise<string> {
  if (documentIds.length === 0) return "";
  
  try {
    console.log("üìö === START getDocumentsContent ===");
    console.log("üìã Pobieranie tre≈õci dokument√≥w:", documentIds);
    
    // üî• POPRAWKA 1: Jedno zapytanie dla wszystkich dokument√≥w z biblioteki wiedzy
    try {
      const url = `/api/knowledge/documents/content?ids=${documentIds.join(',')}`;
      console.log(`üì° Wywo≈Çujƒô API biblioteki wiedzy: ${url}`);
      
      const response = await fetch(url);
      console.log(`üì® Status odpowiedzi biblioteki wiedzy: ${response.status}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`üìÑ Odpowied≈∫ API biblioteki wiedzy:`, {
          hasDocuments: !!data.documents,
          documentsCount: data.documents?.length || 0,
          success: data.success
        });
        
        if (data.documents && data.documents.length > 0) {
          console.log(`‚úÖ Znaleziono ${data.documents.length} dokument√≥w w bibliotece wiedzy`);
          
          let documentsText = "";
          
          for (const doc of data.documents) {
            if (doc.content) {
              const docText = `\n### Dokument: "${doc.title || 'Bez tytu≈Çu'}" (${doc.fileType || 'nieznany'})\n\n${doc.content}\n\n`;
              documentsText += docText;
              console.log(`‚ûï Dodano dokument "${doc.title}" - d≈Çugo≈õƒá: ${doc.content.length} znak√≥w`);
            } else {
              console.warn(`‚ö†Ô∏è Dokument ${doc.id} "${doc.title}" nie zawiera tre≈õci`);
            }
          }
          
          console.log(`üìö === END getDocumentsContent ===`);
          console.log(`üìä FINAL: Zwracam tre≈õƒá ${data.documents.length} dokument√≥w, ≈ÇƒÖczna d≈Çugo≈õƒá: ${documentsText.length} znak√≥w`);
          
          if (documentsText.length > 0) {
            console.log(`üìù Pierwsze 200 znak√≥w: ${documentsText.substring(0, 200)}...`);
            return documentsText;
          }
        } else {
          console.log(`‚ö†Ô∏è API biblioteki wiedzy zwr√≥ci≈Ço pustƒÖ listƒô dokument√≥w`);
        }
      } else {
        console.log(`‚ùå B≈ÇƒÖd HTTP ${response.status} z biblioteki wiedzy`);
        const errorText = await response.text();
        console.log(`‚ùå Tre≈õƒá b≈Çƒôdu: ${errorText}`);
      }
    } catch (error) {
      console.warn(`‚ùå B≈ÇƒÖd podczas pobierania z biblioteki wiedzy:`, error);
    }
    
    // üî• POPRAWKA 2: Fallback do starych dokument√≥w z czatu (jedno za razem)
    console.log(`üîÑ Pr√≥ba pobrania dokument√≥w z czatu jako fallback...`);
    
    const documentPromises = documentIds.map(async (docId) => {
      console.log(`üîç Pr√≥ba pobrania dokumentu z czatu: ${docId}`);
      return getDocument(docId);
    });
    
    const documents = await Promise.all(documentPromises);
    const validDocuments = documents.filter(doc => {
      const isValid = doc !== null && doc !== undefined && doc.content;
      console.log(`üîç Dokument ${doc?.id || 'unknown'} z czatu valid: ${isValid}, content length: ${doc?.content?.length || 0}`);
      return isValid;
    });
    
    if (validDocuments.length > 0) {
      console.log(`‚úÖ Znaleziono ${validDocuments.length} dokument√≥w w czacie`);
      
      let documentsText = "";
      
      for (const doc of validDocuments) {
        if (doc.content) {
          const docText = `\n### Dokument: "${doc.title || 'Bez tytu≈Çu'}" (${doc.fileType || 'nieznany'})\n\n${doc.content}\n\n`;
          documentsText += docText;
          console.log(`‚ûï Dodano dokument z czatu "${doc.title}" - d≈Çugo≈õƒá: ${doc.content.length} znak√≥w`);
        }
      }
      
      console.log(`üìö === END getDocumentsContent (czat fallback) ===`);
      console.log(`üìä FINAL: Zwracam tre≈õƒá ${validDocuments.length} dokument√≥w z czatu, ≈ÇƒÖczna d≈Çugo≈õƒá: ${documentsText.length} znak√≥w`);
      
      return documentsText;
    }
    
    console.log(`‚ùå Nie znaleziono ≈ºadnych dokument√≥w z tre≈õciƒÖ`);
    return "";
    
  } catch (error) {
    console.error('‚ùå KRYTYCZNY B≈ÅƒÑD podczas pobierania tre≈õci dokument√≥w:', error);
    return "";
  }
}

/**
 * Funkcja pomocnicza do poprawy formatowania Markdown dla lepszego wy≈õwietlania
 */
function improveMarkdownFormatting(markdown: string): string {
  let improved = markdown;

  // Zapewniamy, ≈ºe ka≈ºdy element listy jest w osobnej linii
  improved = improved.replace(/(\d+\. [^\n]+)(?=\d+\.)/g, '$1\n');
  improved = improved.replace(/(- [^\n]+)(?=- )/g, '$1\n');
  
  // Zapewniamy, ≈ºe przed nag≈Ç√≥wkami jest pusta linia
  improved = improved.replace(/([^\n])(\n#{1,3} )/g, '$1\n$2');
  
  // Zapewniamy, ≈ºe po nag≈Ç√≥wkach jest pusta linia
  improved = improved.replace(/(#{1,3} [^\n]+)(\n[^#\n])/g, '$1\n$2');
  
  // Zapewniamy, ≈ºe ka≈ºdy element listy numerowanej ma liczbƒô i kropkƒô (np. "1. ")
  improved = improved.replace(/^(\d+)([^\.\s])/gm, '$1. $2');
  
  // Zapewniamy, ≈ºe ka≈ºdy element listy punktowanej ma my≈õlnik i spacjƒô (np. "- ")
  improved = improved.replace(/^(\*|\+)(?!\*)\s*/gm, '- ');
  
  // Zapewniamy, ≈ºe po liscie jest pusta linia
  improved = improved.replace(/((?:- |\d+\. ).+)(\n[^-\d\n])/g, '$1\n$2');
  
  return improved;
}

/**
 * Funkcja do pobierania odpowiedzi od OpenAI
 * @param prompt Zapytanie do API
 * @param documentIds Opcjonalne ID dokument√≥w z biblioteki wiedzy i/lub bazy danych
 * @param enableWebSearch Opcjonalne w≈ÇƒÖczenie wyszukiwania w sieci (domy≈õlnie false, bo ta funkcja nie korzysta z wyszukiwania)
 * @returns Odpowied≈∫ od API
 */
export async function getOpenAIResponseWithManualSearch(
  prompt: string,
  documentIds: string[] = [],
  enableWebSearch: boolean = true,
  forceManualSearch: boolean = false
): Promise<string> {
  try {
    let documentsContext = "";
    if (documentIds.length > 0) {
      documentsContext = await getDocumentsContent(documentIds);
      console.log("D≈Çugo≈õƒá kontekstu dokument√≥w:", documentsContext.length);
      console.log("PoczƒÖtek kontekstu:", documentsContext.substring(0, 200) + "...");
    }

    let manualSearchContent = "";

    if (enableWebSearch && (forceManualSearch || shouldSearchWeb(prompt))) {
      console.log("[Manual Search] Wykonywanie rƒôcznego wyszukiwania dla:", prompt);
      const searchResults = await performSearch(prompt);
      manualSearchContent = `\n\nWyniki wyszukiwania:\n${JSON.stringify(searchResults, null, 2)}`;
    }

    const userPromptWithContext = `${documentsContext}\n${manualSearchContent}\n\nPytanie u≈ºytkownika: ${prompt}\n\nOdpowiedz na podstawie dostarczonych informacji.`;

    // ZMIENIONY SYSTEM PROMPT - Bardziej uniwersalny
    const systemPrompt = `Jeste≈õ pomocnym i wszechstronnym asystentem AI. Potrafisz odpowiadaƒá na szeroki zakres pyta≈Ñ i pomagaƒá w r√≥≈ºnorodnych zadaniach. Odpowiadasz zawsze po polsku, zwiƒô≈∫le i rzeczowo.

Mo≈ºesz pomagaƒá w:
- Projektach UE i dokumentacji projektowej (to jest Twoja specjalizacja)
- Odpowiadaniu na pytania og√≥lne
- Analizie dokument√≥w i danych
- RozwiƒÖzywaniu problem√≥w
- Edukacji i wyja≈õnianiu pojƒôƒá
- Tworzeniu tre≈õci
- Planowaniu i organizacji
- Wsparciu technicznym
- I wielu innych obszarach

${enableWebSearch ? 'Masz mo≈ºliwo≈õƒá wyszukiwania informacji w internecie, aby zapewniƒá aktualne i dok≈Çadne odpowiedzi.' : 'Opieraj siƒô na swoich wewnƒôtrznych informacjach i udostƒôpnionych dokumentach.'}

FORMATOWANIE: U≈ºywaj sk≈Çadni Markdown, aby zapewniƒá dobrƒÖ czytelno≈õƒá odpowiedzi:
1. Wszystkie listy punktowane formatuj u≈ºywajƒÖc my≈õlnik√≥w (-) i nowej linii dla ka≈ºdego punktu
2. Wszystkie listy numerowane formatuj jako 1., 2., itd., zawsze w nowej linii
3. U≈ºywaj nag≈Ç√≥wk√≥w (## dla g≈Ç√≥wnych sekcji, ### dla podsekcji)
4. Wydzielaj poszczeg√≥lne sekcje pustymi liniami
5. U≈ºywaj **pogrubienia** dla wa≈ºnych termin√≥w i pojƒôƒá
6. Nigdy nie u≈ºywaj punkt√≥w oddzielonych tylko spacjami - zawsze u≈ºywaj w≈Ça≈õciwego formatowania Markdown z nowymi liniami
${enableWebSearch ? '7. Je≈õli podajesz informacje znalezione w internecie, zawsze podawaj ≈∫r√≥d≈Ça w formie link√≥w.' : ''}

Je≈õli u≈ºytkownik za≈ÇƒÖczy≈Ç jakie≈õ dokumenty, to wa≈ºne, aby≈õ bazowa≈Ç na ich tre≈õci w swojej odpowiedzi. Dokumenty sƒÖ bardzo wa≈ºnym kontekstem dla Twoich odpowiedzi.

ZASADY ODPOWIADANIA:
- Odpowiadaj na wszystkie rozsƒÖdne pytania w ramach swoich mo≈ºliwo≈õci
- BƒÖd≈∫ pomocny, dok≈Çadny i rzetelny
- Je≈õli nie znasz odpowiedzi, powiedz o tym szczerze
- Dostosuj ton i poziom szczeg√≥≈Çowo≈õci do pytania
- Zachowuj profesjonalizm przy jednoczesnej ≈ºyczliwo≈õci
- Je≈õli pytanie dotyczy szkodliwych, nielegalnych lub nieetycznych dzia≈Ça≈Ñ, grzecznie odm√≥w i zaproponuj konstruktywne alternatywy`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-2024-04-16",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPromptWithContext }
      ],
      temperature: 1,
      max_tokens: 4096
    });

    const rawResponse = response.choices[0]?.message?.content || "Brak odpowiedzi.";
    return improveMarkdownFormatting(rawResponse);

  } catch (error) {
    console.error("B≈ÇƒÖd podczas generowania odpowiedzi:", error);
    return "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania Twojego zapytania. Spr√≥buj ponownie p√≥≈∫niej.";
  }
}

/**
 * Funkcja do wykonania wyszukiwania w sieci
 */
async function performSearch(query: string): Promise<any> {
  try {
    console.log(`üîç Wykonujƒô wyszukiwanie dla: "${query}"`);
    
    const response = await fetch('/api/web-search', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ query }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`B≈ÇƒÖd wyszukiwania: ${response.status} - ${errorData.error || 'Nieznany b≈ÇƒÖd'}`);
    }

    const searchData = await response.json();
    
    console.log(`‚úÖ Znaleziono ${searchData.totalResults} wynik√≥w dla: "${query}"`);
    
    return {
      query: searchData.query,
      results: searchData.results || [],
      totalResults: searchData.totalResults || 0,
      source: searchData.source || 'unknown'
    };
    
  } catch (error) {
    console.error("‚ùå B≈ÇƒÖd wyszukiwania:", error);
    
    // Zwr√≥ƒá uproszczonƒÖ odpowied≈∫ w przypadku b≈Çƒôdu
    return {
      query,
      results: [],
      totalResults: 0,
      error: error instanceof Error ? error.message : "Nie uda≈Ço siƒô wykonaƒá wyszukiwania",
      source: 'error'
    };
  }
}

/**
 * Funkcja do pobierania tre≈õci strony
 */
export async function fetchWebContent(url: string): Promise<any> {
  try {
    const response = await fetch('/api/web-fetch', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ url }),
    });

    if (!response.ok) {
      throw new Error(`B≈ÇƒÖd pobierania strony: ${response.status}`);
    }

    const result = await response.json();

    // U≈ºywamy tylko 'snippet', kt√≥ry zawiera przetworzony i ograniczony tekst
    return {
      title: result.title,
      url: result.url,
      content: result.snippet || 'Brak dostƒôpnej tre≈õci.'
    };

  } catch (error) {
    console.error("B≈ÇƒÖd pobierania strony:", error);
    return { error: "Nie uda≈Ço siƒô pobraƒá tre≈õci strony" };
  }
}

/**
 * Funkcja do pobierania odpowiedzi od OpenAI z mo≈ºliwo≈õciƒÖ wyszukiwania w sieci
 * @param prompt Zapytanie do API
 * @param documentIds Opcjonalne ID dokument√≥w z biblioteki wiedzy i/lub bazy danych
 * @param enableWebSearch Czy w≈ÇƒÖczyƒá wyszukiwanie w sieci
 * @returns Odpowied≈∫ od API
 */
export async function getOpenAIResponseWithWebSearch(
  prompt: string, 
  documentIds: string[] = [],
  enableWebSearch: boolean = true
): Promise<string> {
  try {
    // üî• POPRAWKA: Pobierz tre≈õƒá dokument√≥w PRZED przygotowaniem promptu
    let documentsContext = "";
    if (documentIds.length > 0) {
      console.log(`üìö Pobieranie tre≈õci ${documentIds.length} dokument√≥w...`);
      documentsContext = await getDocumentsContent(documentIds);
      console.log(`üìä Otrzymano kontekst dokument√≥w o d≈Çugo≈õci: ${documentsContext.length} znak√≥w`);
      
      if (documentsContext.length > 0) {
        console.log(`üìù Pierwsze 200 znak√≥w kontekstu: ${documentsContext.substring(0, 200)}...`);
      } else {
        console.warn(`‚ö†Ô∏è Kontekst dokument√≥w jest pusty mimo ${documentIds.length} ID`);
      }
    }

    // Sprawd≈∫, czy zapytanie mo≈ºe wymagaƒá wyszukiwania w sieci
    const shouldUseWebSearch = enableWebSearch && shouldSearchWeb(prompt);
    
    console.log(`üîç Analiza zapytania: "${prompt}"`);
    console.log(`üìä Wyszukiwanie w≈ÇƒÖczone: ${enableWebSearch}`);
    console.log(`üîç Czy u≈ºyƒá wyszukiwania: ${shouldUseWebSearch}`);

    // ZAKTUALIZOWANY SYSTEM PROMPT z lepszƒÖ obs≈ÇugƒÖ wyszukiwania
    const systemPrompt = `Jeste≈õ pomocnym i wszechstronnym asystentem AI o nazwie MarsoftAI. 

Twoje g≈Ç√≥wne kompetencje:
- Specjalizujesz siƒô w projektach UE i dokumentacji projektowej
- Potrafisz odpowiadaƒá na szeroki zakres pyta≈Ñ z r√≥≈ºnych dziedzin
- Analizujesz dokumenty i dane
- Pomagasz w programowaniu, naukach, biznesie i wielu innych obszarach

${enableWebSearch 
  ? `üåê WYSZUKIWANIE W INTERNECIE: W≈ÅƒÑCZONE
Masz dostƒôp do aktualnych informacji z internetu. Gdy potrzebujesz najnowszych danych, aktualnych cen, bie≈ºƒÖcych wydarze≈Ñ lub informacji, kt√≥re mog≈Çy siƒô zmieniƒá od Twojej ostatniej aktualizacji wiedzy, u≈ºyj funkcji wyszukiwania.

KIEDY U≈ªYWAƒÜ WYSZUKIWANIA:
- Aktualne ceny, kursy walut, notowania gie≈Çdowe
- Najnowsze wiadomo≈õci i wydarzenia
- Bie≈ºƒÖce regulacje prawne i przepisy UE
- Aktualne programy finansowania UE
- Terminy nabor√≥w i konkurs√≥w
- Sprawdzanie dat, termin√≥w, aktualnych status√≥w
- Weryfikacja aktualnych informacji kontaktowych
- Sprawdzanie dostƒôpno≈õci stron internetowych` 
  : `üåê WYSZUKIWANIE W INTERNECIE: WY≈ÅƒÑCZONE
Nie masz dostƒôpu do internetu. Opieraj siƒô tylko na swojej wewnƒôtrznej wiedzy i udostƒôpnionych dokumentach.`}

FORMATOWANIE ODPOWIEDZI (Markdown):
1. Listy punktowane: u≈ºywaj my≈õlnik√≥w (-) w nowych liniach
2. Listy numerowane: 1., 2., itd. w nowych liniach  
3. Nag≈Ç√≥wki: ## dla g≈Ç√≥wnych sekcji, ### dla podsekcji
4. Pogrubienia: **tekst** dla wa≈ºnych termin√≥w
5. Wydzielaj sekcje pustymi liniami
${enableWebSearch ? '6. ≈πr√≥d≈Ça internetowe: zawsze podawaj linki do ≈∫r√≥de≈Ç' : ''}

ZASADY:
- Odpowiadaj dok≈Çadnie i rzetelnie
- Dostosuj ton do charakteru pytania  
- Je≈õli nie znasz odpowiedzi, powiedz to szczerze
- Bazuj na udostƒôpnionych dokumentach jako priorytet
- Zachowaj profesjonalizm i ≈ºyczliwo≈õƒá

${documentsContext ? '**WA≈ªNE: Masz dostƒôp do dokument√≥w referencyjnych. Bazuj na nich w pierwszej kolejno≈õci przy odpowiadaniu na pytania.**' : ''}`;
    
    // üî• POPRAWKA: Poprawnie skonstruuj prompt z dokumentami
    let userPromptWithContext = prompt;
    
    // Dodaj kontekst dokument√≥w je≈õli istniejƒÖ
    if (documentsContext) {
      userPromptWithContext = `üìã DOKUMENTY REFERENCYJNE:
${documentsContext}

üí¨ PYTANIE U≈ªYTKOWNIKA: ${prompt}

Odpowiedz na pytanie bazujƒÖc przede wszystkim na dostarczonych dokumentach. Je≈õli informacje w dokumentach nie sƒÖ wystarczajƒÖce, uzupe≈Çnij je swojƒÖ wiedzƒÖ${enableWebSearch ? ' lub wyszukiwaniem w internecie' : ''}.`;
      
      console.log(`‚úÖ Dodano kontekst dokument√≥w do promptu (d≈Çugo≈õƒá: ${documentsContext.length} znak√≥w)`);
    }

    let searchResults = "";
    
    // Wykonaj wyszukiwanie je≈õli jest potrzebne
    if (shouldUseWebSearch) {
      console.log("üîç Wykonujƒô wyszukiwanie w internecie...");
      
      const searchData = await performSearch(prompt);
      
      if (searchData.results && searchData.results.length > 0) {
        searchResults = `\n\nüåê WYNIKI WYSZUKIWANIA W INTERNECIE dla "${searchData.query}":\n\n`;
        
        searchData.results.forEach((result: any, index: number) => {
          searchResults += `${index + 1}. **${result.title}**\n`;
          searchResults += `   URL: ${result.url}\n`;
          searchResults += `   Opis: ${result.snippet}\n`;
          if (result.published) {
            searchResults += `   Data: ${result.published}\n`;
          }
          searchResults += `\n`;
        });
        
        searchResults += `≈πr√≥d≈Ço wyszukiwania: ${searchData.source}\n`;
        console.log(`‚úÖ Dodano ${searchData.results.length} wynik√≥w wyszukiwania do kontekstu`);
      } else if (searchData.error) {
        searchResults = `\n\n‚ö†Ô∏è B≈ÇƒÖd wyszukiwania: ${searchData.error}\n`;
        console.log(`‚ùå B≈ÇƒÖd wyszukiwania: ${searchData.error}`);
      }
    }

    // üî• POPRAWKA: Po≈ÇƒÖcz wszystkie konteksty POPRAWNIE
    const finalPrompt = userPromptWithContext + searchResults;

    console.log(`üìù Wysy≈Çam zapytanie do OpenAI:`);
    console.log(`   - D≈Çugo≈õƒá promptu: ${finalPrompt.length} znak√≥w`);
    console.log(`   - Ma dokumenty: ${documentsContext.length > 0}`);
    console.log(`   - Ma wyszukiwanie: ${searchResults.length > 0}`);

    // Wys≈Çanie zapytania do OpenAI
    const response = await openai.chat.completions.create({
      model: "gpt-4o", // U≈ºyj najnowszego modelu
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: finalPrompt }
      ],
      temperature: 0.7,
      max_tokens: 4096
    });

    const rawResponse = response.choices[0]?.message?.content || "Przepraszam, nie uda≈Ço siƒô wygenerowaƒá odpowiedzi.";
    
    console.log(`‚úÖ Otrzymano odpowied≈∫ od OpenAI (d≈Çugo≈õƒá: ${rawResponse.length} znak√≥w)`);
    
    // Popraw formatowanie Markdown przed zwr√≥ceniem odpowiedzi
    return improveMarkdownFormatting(rawResponse);
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas pobierania odpowiedzi z OpenAI:', error);
    return "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania Twojego zapytania. Spr√≥buj ponownie p√≥≈∫niej.";
  }
}

/**
 * Funkcja do analizy tekstu wyekstrahowanego z PDF z wykorzystaniem OpenAI
 * @param pdfText Tekst wyekstrahowany z PDF
 * @param pdfMetadata Metadane PDF (nazwa, liczba stron, itp.)
 * @param query Zapytanie u≈ºytkownika
 * @param documentIds Opcjonalne ID dokument√≥w z biblioteki wiedzy
 * @param enableWebSearch Czy w≈ÇƒÖczyƒá wyszukiwanie w internecie
 * @returns Odpowied≈∫ od API
 */
export async function analyzePdfWithOpenAI(
  pdfText: string, 
  pdfMetadata: any, 
  query: string, 
  documentIds: string[] = [],
  enableWebSearch: boolean = true
): Promise<string> {
  try {
    // Pobierz tre≈õƒá dokument√≥w z biblioteki, je≈õli sƒÖ
    let documentsContext = "";
    if (documentIds.length > 0) {
      documentsContext = await getDocumentsContent(documentIds);
    }

    // Po≈ÇƒÖcz kontekst PDF i dokument√≥w z biblioteki
    let fullContext = `
## Analizowany dokument PDF:
- Tytu≈Ç: ${pdfMetadata.title || 'Nieznany'}
- Liczba stron: ${pdfMetadata.pages || 'Nieznana'}

### Zawarto≈õƒá dokumentu (fragment):
${pdfText.substring(0, 3000)}...
`;

    if (documentsContext) {
      fullContext += `\n## Dodatkowe dokumenty referencyjne:\n${documentsContext}`;
    }

    fullContext += `\n## Na podstawie powy≈ºszej zawarto≈õci, odpowiedz na pytanie:\n${query}\n\nPamiƒôtaj o prawid≈Çowym formatowaniu Markdown w odpowiedzi.`;
    
    // U≈ºyj funkcji z mo≈ºliwo≈õciƒÖ wyszukiwania
    const response = await getOpenAIResponseWithWebSearch(fullContext, [], enableWebSearch);
    
    // Popraw formatowanie Markdown przed zwr√≥ceniem odpowiedzi
    return improveMarkdownFormatting(response);
  } catch (error) {
    console.error('B≈ÇƒÖd podczas analizy PDF z OpenAI:', error);
    return "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas analizy dokumentu. Spr√≥buj ponownie p√≥≈∫niej :(.";
  }
}

/**
 * Funkcja do analizy danych Excel z wykorzystaniem OpenAI
 * @param excelText Tekst wyekstrahowany z arkusza Excel
 * @param excelMetadata Metadane Excel (nazwa, liczba arkuszy, wierszy, itp.)
 * @param query Zapytanie u≈ºytkownika
 * @param documentIds Opcjonalne ID dokument√≥w z biblioteki wiedzy
 * @param enableWebSearch Czy w≈ÇƒÖczyƒá wyszukiwanie w internecie
 * @returns Odpowied≈∫ od API
 */
export async function analyzeExcelWithOpenAI(
  excelText: string, 
  excelMetadata: any, 
  query: string,
  documentIds: string[] = [],
  enableWebSearch: boolean = true
): Promise<string> {
  try {
    // Pobierz tre≈õƒá dokument√≥w z biblioteki, je≈õli sƒÖ
    let documentsContext = "";
    if (documentIds.length > 0) {
      documentsContext = await getDocumentsContent(documentIds);
    }

    // Po≈ÇƒÖcz kontekst Excel i dokument√≥w z biblioteki
    let fullContext = `
## Analizowany arkusz Excel:
- Tytu≈Ç: ${excelMetadata.title || 'Nieznany'}
- Liczba arkuszy: ${excelMetadata.sheetCount || 'Nieznana'}
- Liczba wierszy: ${excelMetadata.totalRows || 'Nieznana'}
- Liczba kolumn: ${excelMetadata.totalColumns || 'Nieznana'}

### Zawarto≈õƒá arkusza (fragment):
\`\`\`
${excelText.substring(0, 3000)}...
\`\`\`
`;

    if (documentsContext) {
      fullContext += `\n## Dodatkowe dokumenty referencyjne:\n${documentsContext}`;
    }

    fullContext += `\n## Na podstawie powy≈ºszej zawarto≈õci, odpowiedz na pytanie:\n${query}\n\nPamiƒôtaj o prawid≈Çowym formatowaniu Markdown w odpowiedzi.`;
    
    // U≈ºyj funkcji z mo≈ºliwo≈õciƒÖ wyszukiwania
    const response = await getOpenAIResponseWithWebSearch(fullContext, [], enableWebSearch);
    
    // Popraw formatowanie Markdown przed zwr√≥ceniem odpowiedzi
    return improveMarkdownFormatting(response);
  } catch (error) {
    console.error('B≈ÇƒÖd podczas analizy Excel z OpenAI:', error);
    return "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas analizy arkusza Excel. Spr√≥buj ponownie p√≥≈∫niej.";
  }
}

/**
 * Funkcja do generowania PDF przez asystenta AI i zwracania linku
 * @param prompt Zapytanie u≈ºytkownika o wygenerowanie dokumentu
 * @param chatId ID czatu
 * @param documentTitle Tytu≈Ç dokumentu
 * @returns Odpowied≈∫ od API z linkiem do wygenerowanego PDF
 */
export async function generatePdfDocument(
  prompt: string,
  chatId: string,
  documentTitle?: string
): Promise<{ message: string; pdfUrl: string; documentId?: string }> {
  try {
    // Najpierw wygeneruj tre≈õƒá dokumentu za pomocƒÖ OpenAI
    const pdfContent = await getOpenAIResponseWithWebSearch(
      `Wygeneruj dokument w formacie markdown na podstawie zapytania: "${prompt}". 
      U≈ºyj formatowania markdown z nag≈Ç√≥wkami (## i ###), pogrubieniami (**tekst**), 
      listami punktowanymi (- punkt) lub numerowanymi (1. punkt).`,
      [],
      true
    );
    
    // Tytu≈Ç dokumentu (z zapytania lub domy≈õlny)
    const title = documentTitle || `Dokument: ${prompt.substring(0, 50)}${prompt.length > 50 ? '...' : ''}`;
    
    // Teraz wy≈õlij zapytanie do endpointu generowania PDF
    const response = await fetch('/api/generate-pdf', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title,
        content: pdfContent,
        chatId,
        addToChat: true
      }),
    });
    
    if (!response.ok) {
      throw new Error(`Problem z generowaniem PDF. Status: ${response.status}`);
    }
    
    // Pobierz link do pliku PDF i ID dokumentu z nag≈Ç√≥wk√≥w odpowiedzi
    const documentId = response.headers.get('Document-Id') || undefined;
    
    // Utw√≥rz blob URL dla odpowiedzi
    const blob = await response.blob();
    const pdfUrl = URL.createObjectURL(blob);
    
    return {
      message: `Wygenerowa≈Çem dokument "${title}". Mo≈ºesz go pobraƒá lub przeglƒÖdaƒá bezpo≈õrednio w konwersacji.`,
      pdfUrl,
      documentId
    };
    
  } catch (error) {
    console.error('B≈ÇƒÖd podczas generowania dokumentu PDF:', error);
    return {
      message: "Przepraszam, wystƒÖpi≈Ç problem podczas generowania dokumentu PDF. Spr√≥buj ponownie p√≥≈∫niej.",
      pdfUrl: ""
    };
  }
}

/**
 * Funkcja do obs≈Çugi ≈ºƒÖda≈Ñ u≈ºytkownika zwiƒÖzanych z generowaniem dokument√≥w
 * @param prompt Zapytanie u≈ºytkownika 
 * @param chatId ID czatu
 * @returns Odpowied≈∫ dla u≈ºytkownika
 */
export async function handleDocumentGeneration(
  prompt: string,
  chatId: string
): Promise<{ text: string; pdfUrl?: string; documentId?: string }> {
  // Rozbudowany zestaw wzorc√≥w do wykrywania ≈ºƒÖda≈Ñ generowania dokument√≥w
  const generateDocumentPatterns = [
    // Wzorce bezpo≈õrednio zwiƒÖzane z dokumentami
    /wygeneruj (?:dla mnie )?(?:dokument|pdf|plik pdf|raport)/i,
    /(?:stw√≥rz|utw√≥rz|przygotuj|zr√≥b)(?:\s+dla\s+mnie)?\s+(?:dokument|pdf|plik pdf|raport)/i,
    /(?:zr√≥b|wygeneruj|stw√≥rz) (?:dla mnie )?(?:pdf|plik pdf|dokument pdf)/i,
    /(?:zapisz|wyeksportuj)(?:\s+to)?\s+(?:jako|do|w)?\s+(?:pdf|dokument|pliku)/i,
    /(?:zr√≥b|utw√≥rz)(?:\s+z\s+tego)?\s+(?:dokument|pdf|plik)/i,
    /(?:sporzƒÖd≈∫|generuj|wykonaj)(?:\s+dla\s+mnie)?\s+(?:dokument|raport|pdf)/i,
    
    // Wzorce z listy, tabelƒÖ itp.
    /(?:stw√≥rz|przygotuj|wygeneruj)(?:\s+dla\s+mnie)?\s+(?:listƒô|zestawienie|tabelƒô|wykaz)/i,
    /(?:zr√≥b|utw√≥rz|stw√≥rz)(?:\s+dla\s+mnie)?\s+(?:listƒô|zestawienie|tabelƒô|wykaz|podsumowanie)/i,
    
    // Wzorce z dokumentami specyficznymi
    /(?:przygotuj|wygeneruj|stw√≥rz)(?:\s+dla\s+mnie)?\s+(?:ofertƒô|umowƒô|sprawozdanie|analizƒô)/i,
    /(?:napisz|przygotuj)(?:\s+dla\s+mnie)?\s+(?:protok√≥≈Ç|zarys|kosztorys|specyfikacjƒô)/i,
    
    // Wzorce z frazami formalnymi
    /(?:uprzejmie\s+proszƒô\s+o\s+przygotowanie|czy\s+m√≥g≈Çby≈õ\s+przygotowaƒá)(?:\s+dla\s+mnie)?\s+(?:dokumentu|raportu|pliku|pdf)/i,
    /(?:potrzebujƒô|chcia≈Çbym)(?:\s+otrzymaƒá)?\s+(?:dokument|raport|plik pdf|zestawienie)/i
  ];
  
  // Sprawd≈∫, czy zapytanie pasuje do kt√≥regokolwiek z wzorc√≥w
  let isDocumentRequest = generateDocumentPatterns.some(pattern => pattern.test(prompt));
  
  // Dodatkowe sprawdzanie kontekstowe dla prostszych fraz
  // Je≈õli fraza jest prosta, ale zawiera s≈Çowo kluczowe i kontekst dokumentu
  if (!isDocumentRequest) {
    const simplePatterns = [
      /(?:lista|zestawienie|tabela|wykaz|spis)/i,
      /(?:raport|pdf|dokument)/i,
      /(?:podsumowanie|analiza)/i
    ];
    
    const documentContextPatterns = [
      /(?:os√≥b|ludzi|personelu|pracownik√≥w|uczestnik√≥w)/i,
      /(?:projekt|ue|unii|europejski|regionalny)/i,
      /(?:zada≈Ñ|koszt√≥w|wydatk√≥w|harmonogram)/i
    ];
    
    const hasSimplePattern = simplePatterns.some(pattern => pattern.test(prompt));
    const hasContextPattern = documentContextPatterns.some(pattern => pattern.test(prompt));
    
    // Je≈õli zapytanie zawiera zar√≥wno prostƒÖ frazƒô jak i kontekst dokumentu, uznaj za ≈ºƒÖdanie dokumentu
    if (hasSimplePattern && hasContextPattern) {
      console.log("Wykryto kontekstowe ≈ºƒÖdanie dokumentu:", prompt);
      isDocumentRequest = true;
    }
  }
  
  if (!isDocumentRequest) {
    // Je≈õli nie jest to ≈ºƒÖdanie dokumentu, zwr√≥ƒá pusty tekst - normalna odpowied≈∫ AI
    return { text: "" };
  }
  
  console.log("Wykryto ≈ºƒÖdanie generowania dokumentu:", prompt);
  
  // Ekstrahuj tytu≈Ç dokumentu, je≈õli zosta≈Ç podany
  const titleMatch = prompt.match(/z tytu≈Çem [\"\'](.*?)[\"\']/i) || 
                    prompt.match(/tytu≈Çem [\"\'](.*?)[\"\']/i) ||
                    prompt.match(/zatytu≈Çowany [\"\'](.*?)[\"\']/i) ||
                    prompt.match(/nazwa [\"\'](.*?)[\"\']/i) ||
                    prompt.match(/pt\. [\"\'](.*?)[\"\']/i);
  
  const documentTitle = titleMatch ? titleMatch[1] : undefined;
  
  // Ekstrahuj tre≈õƒá zapytania bez instrukcji generowania PDF
  // Rozbudowane wzorce do usuwania instrukcji generowania
  const contentPrompt = prompt
    .replace(/(?:wygeneruj|stw√≥rz|przygotuj|utw√≥rz|zr√≥b|sporzƒÖd≈∫|generuj|wykonaj)(?:\s+dla\s+mnie)?(?:\s+(?:dokument|pdf|plik|raport|listƒô|zestawienie|tabelƒô|wykaz|podsumowanie|ofertƒô|umowƒô|sprawozdanie|analizƒô|protok√≥≈Ç|zarys|kosztorys|specyfikacjƒô))/gi, '')
    .replace(/(?:zapisz|wyeksportuj)(?:\s+to)?(?:\s+(?:jako|do|w))?(?:\s+(?:pdf|dokument|plik))/gi, '')
    .replace(/(?:uprzejmie\s+proszƒô\s+o\s+przygotowanie|czy\s+m√≥g≈Çby≈õ\s+przygotowaƒá)(?:\s+dla\s+mnie)?(?:\s+(?:dokumentu|raportu|pliku|pdf))/gi, '')
    .replace(/(?:potrzebujƒô|chcia≈Çbym)(?:\s+otrzymaƒá)?(?:\s+(?:dokument|raport|plik|zestawienie))/gi, '')
    .replace(/z tytu≈Çem [\"\'](.*?)[\"\']|tytu≈Çem [\"\'](.*?)[\"\']|zatytu≈Çowany [\"\'](.*?)[\"\']|nazwa [\"\'](.*?)[\"\']|pt\. [\"\'](.*?)[\"\']/gi, '')
    .trim();
  
  // Wygeneruj dokument
  const result = await generatePdfDocument(contentPrompt, chatId, documentTitle);
  
  return {
    text: result.message,
    pdfUrl: result.pdfUrl,
    documentId: result.documentId
  };
}

export { openai };