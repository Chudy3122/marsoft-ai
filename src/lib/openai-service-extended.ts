// src/lib/openai-service-extended.ts
import OpenAI from 'openai';
import { 
  openai, 
  getDocumentsContent, 
  improveMarkdownFormatting 
} from './openai-service';

// Typy dla procesu my≈õlowego
export interface ReasoningStep {
  id: string;
  title: string;
  content: string;
  type: 'analysis' | 'planning' | 'execution' | 'verification';
}

export interface ExtendedResponse {
  response: string;
  reasoning?: {
    steps: ReasoningStep[];
    finalAnswer: string;
  };
}

/**
 * System prompt dla rozszerzonego my≈õlenia
 */
const getExtendedReasoningSystemPrompt = (enableWebSearch: boolean, hasDocuments: boolean): string => {
  return `Jeste≈õ zaawansowanym asystentem AI o nazwie MarsoftAI z mo≈ºliwo≈õciƒÖ rozszerzonego my≈õlenia.

TRYB ROZSZERZONEGO MY≈öLENIA:
Gdy u≈ºytkownik zadaje pytanie, najpierw przedstaw sw√≥j proces my≈õlowy w strukturze JSON, a nastƒôpnie podaj finalnƒÖ odpowied≈∫.

STRUKTURA PROCESU MY≈öLOWEGO:
\`\`\`json
{
  "reasoning_process": {
    "steps": [
      {
        "id": "1",
        "title": "Analiza problemu",
        "content": "Szczeg√≥≈Çowe zrozumienie pytania, identyfikacja kluczowych element√≥w",
        "type": "analysis"
      },
      {
        "id": "2", 
        "title": "Planowanie podej≈õcia",
        "content": "Okre≈õlenie strategii rozwiƒÖzania, jakie informacje sƒÖ potrzebne",
        "type": "planning"
      },
      {
        "id": "3",
        "title": "Wykonanie analizy",
        "content": "Krok po kroku rozwiƒÖzywanie problemu, analiza danych",
        "type": "execution"
      },
      {
        "id": "4",
        "title": "Weryfikacja i synteza",
        "content": "Sprawdzenie poprawno≈õci, po≈ÇƒÖczenie wynik√≥w w sp√≥jnƒÖ ca≈Ço≈õƒá",
        "type": "verification"
      }
    ]
  }
}
\`\`\`

TYPY KROK√ìW:
- "analysis": Analiza problemu, zrozumienie kontekstu
- "planning": Planowanie strategii rozwiƒÖzania  
- "execution": Wykonanie konkretnych dzia≈Ça≈Ñ/analiz
- "verification": Weryfikacja wynik√≥w i synteza

ZASADY PROCESU MY≈öLOWEGO:
1. Ka≈ºdy krok powinien byƒá konkretny i szczeg√≥≈Çowy
2. U≈ºywaj minimum 3, maksimum 6 krok√≥w
3. Dostosuj liczbƒô krok√≥w do z≈Ço≈ºono≈õci problemu
4. W ka≈ºdym kroku wyja≈õnij swoje rozumowanie
5. Pokazuj jak dochodzisz do wniosk√≥w

${enableWebSearch 
  ? `üåê WYSZUKIWANIE: Masz dostƒôp do internetu - wykorzystuj aktualne dane.`
  : `üåê WYSZUKIWANIE: Wy≈ÇƒÖczone - u≈ºywaj tylko w≈Çasnej wiedzy.`}

${hasDocuments 
  ? `üìö DOKUMENTY: Masz dostƒôp do dokument√≥w - analizuj je w pierwszej kolejno≈õci.`
  : ''}

FORMATOWANIE KO≈ÉCOWEJ ODPOWIEDZI:
Po przedstawieniu procesu my≈õlowego podaj finalnƒÖ odpowied≈∫ w formacie Markdown:
- U≈ºywaj nag≈Ç√≥wk√≥w (## ###)
- Listy punktowane (-) i numerowane (1.)
- Pogrubienia (**tekst**)
- Kod w backtickach
- Tabele gdy potrzebne

Twoja specjalizacja to projekty UE i dokumentacja, ale odpowiadasz na wszystkie rozsƒÖdne pytania.`;
};

/**
 * Parsowanie odpowiedzi z procesem my≈õlowym
 */
function parseReasoningResponse(response: string): ExtendedResponse {
  try {
    // Szukaj bloku JSON z procesem my≈õlowym
    const jsonMatch = response.match(/```json\s*(\{[\s\S]*?\})\s*```/);
    
    if (!jsonMatch) {
      // Brak struktury JSON - zwr√≥ƒá standardowƒÖ odpowied≈∫
      return {
        response: improveMarkdownFormatting(response)
      };
    }

    const jsonStr = jsonMatch[1];
    const reasoningData = JSON.parse(jsonStr);
    
    // Pobierz czƒô≈õƒá odpowiedzi po bloku JSON
    const afterJsonIndex = response.indexOf('```', response.indexOf(jsonStr) + jsonStr.length) + 3;
    let finalAnswer = response.substring(afterJsonIndex).trim();
    
    // Je≈õli brak finalnej odpowiedzi po JSON, u≈ºyj ca≈Çej odpowiedzi
    if (!finalAnswer) {
      finalAnswer = response.replace(/```json[\s\S]*?```/g, '').trim();
    }

    // Walidacja struktury procesu my≈õlowego
    if (!reasoningData.reasoning_process?.steps || !Array.isArray(reasoningData.reasoning_process.steps)) {
      console.warn("Nieprawid≈Çowa struktura procesu my≈õlowego, u≈ºywam standardowej odpowiedzi");
      return {
        response: improveMarkdownFormatting(response)
      };
    }

    // Konwersja krok√≥w do wymaganego formatu
    const steps: ReasoningStep[] = reasoningData.reasoning_process.steps.map((step: any, index: number) => ({
      id: step.id || String(index + 1),
      title: step.title || `Krok ${index + 1}`,
      content: step.content || "Brak tre≈õci",
      type: ['analysis', 'planning', 'execution', 'verification'].includes(step.type) 
        ? step.type 
        : 'analysis'
    }));

    return {
      response: improveMarkdownFormatting(finalAnswer),
      reasoning: {
        steps,
        finalAnswer: improveMarkdownFormatting(finalAnswer)
      }
    };

  } catch (error) {
    console.error("B≈ÇƒÖd parsowania procesu my≈õlowego:", error);
    // W przypadku b≈Çƒôdu zwr√≥ƒá standardowƒÖ odpowied≈∫
    return {
      response: improveMarkdownFormatting(response)
    };
  }
}

/**
 * G≈Ç√≥wna funkcja z rozszerzonym my≈õleniem
 */
export async function getOpenAIResponseWithExtendedReasoning(
  prompt: string,
  documentIds: string[] = [],
  enableWebSearch: boolean = true,
  enableExtendedReasoning: boolean = false
): Promise<ExtendedResponse> {
  try {
    console.log("üß† === START getOpenAIResponseWithExtendedReasoning ===");
    console.log(`üìù Prompt: "${prompt.substring(0, 100)}${prompt.length > 100 ? '...' : ''}"`);
    console.log(`üìö DocumentIds: ${documentIds.length}`);
    console.log(`üåê WebSearch: ${enableWebSearch}`);
    console.log(`üß† ExtendedReasoning: ${enableExtendedReasoning}`);

    // Pobierz kontekst dokument√≥w
    let documentsContext = "";
    if (documentIds.length > 0) {
      console.log(`üìö Pobieranie tre≈õci ${documentIds.length} dokument√≥w...`);
      documentsContext = await getDocumentsContent(documentIds);
      console.log(`üìä Otrzymano kontekst dokument√≥w: ${documentsContext.length} znak√≥w`);
    }

    // Przygotuj system prompt
    const systemPrompt = enableExtendedReasoning 
      ? getExtendedReasoningSystemPrompt(enableWebSearch, documentsContext.length > 0)
      : getStandardSystemPrompt(enableWebSearch, documentsContext.length > 0);

    // Przygotuj prompt u≈ºytkownika z kontekstem
    let userPromptWithContext = prompt;
    
    if (documentsContext) {
      userPromptWithContext = `üìã DOKUMENTY REFERENCYJNE:
${documentsContext}

üí¨ PYTANIE U≈ªYTKOWNIKA: ${prompt}

${enableExtendedReasoning 
  ? 'Najpierw przedstaw sw√≥j proces my≈õlowy w formacie JSON, a nastƒôpnie podaj finalnƒÖ odpowied≈∫.' 
  : 'Odpowiedz na pytanie bazujƒÖc na dostarczonych dokumentach.'}`;
    } else if (enableExtendedReasoning) {
      userPromptWithContext = `${prompt}

Przedstaw sw√≥j proces my≈õlowy w formacie JSON, a nastƒôpnie podaj finalnƒÖ odpowied≈∫.`;
    }

    console.log(`üìù Wysy≈Çam zapytanie do OpenAI (Extended: ${enableExtendedReasoning})`);

    // Wywo≈Çanie OpenAI
    const response = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPromptWithContext }
      ],
      temperature: enableExtendedReasoning ? 0.3 : 0.7,
      max_tokens: enableExtendedReasoning ? 6000 : 4096
    });

    const rawResponse = response.choices[0]?.message?.content || "Przepraszam, nie uda≈Ço siƒô wygenerowaƒá odpowiedzi.";
    
    console.log(`‚úÖ Otrzymano odpowied≈∫ od OpenAI (${rawResponse.length} znak√≥w)`);

    // Parsuj odpowied≈∫ w zale≈ºno≈õci od trybu
    if (enableExtendedReasoning) {
      const parsedResponse = parseReasoningResponse(rawResponse);
      console.log(`üß† Proces my≈õlowy: ${parsedResponse.reasoning ? 'ZNALEZIONY' : 'BRAK'}`);
      if (parsedResponse.reasoning) {
        console.log(`üß† Liczba krok√≥w: ${parsedResponse.reasoning.steps.length}`);
      }
      return parsedResponse;
    } else {
      return {
        response: improveMarkdownFormatting(rawResponse)
      };
    }

  } catch (error) {
    console.error('‚ùå === B≈ÅƒÑD getOpenAIResponseWithExtendedReasoning ===');
    console.error('‚ùå Szczeg√≥≈Çy:', error);
    
    return {
      response: "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania Twojego zapytania. Spr√≥buj ponownie p√≥≈∫niej."
    };
  }
}

/**
 * Standardowy system prompt (dla trybu bez rozszerzonego my≈õlenia)
 */
function getStandardSystemPrompt(enableWebSearch: boolean, hasDocuments: boolean): string {
  return `Jeste≈õ pomocnym i wszechstronnym asystentem AI o nazwie MarsoftAI.

Twoje g≈Ç√≥wne kompetencje:
- Specjalizujesz siƒô w projektach UE i dokumentacji projektowej
- Potrafisz odpowiadaƒá na szeroki zakres pyta≈Ñ z r√≥≈ºnych dziedzin
- Analizujesz dokumenty i dane
- Pomagasz w programowaniu, naukach, biznesie i wielu innych obszarach

${enableWebSearch 
  ? `üåê WYSZUKIWANIE W INTERNECIE: W≈ÅƒÑCZONE`
  : `üåê WYSZUKIWANIE W INTERNECIE: WY≈ÅƒÑCZONE`}

${hasDocuments 
  ? `**WA≈ªNE: Masz dostƒôp do dokument√≥w referencyjnych. Bazuj na nich w pierwszej kolejno≈õci przy odpowiadaniu na pytania.**`
  : ''}

FORMATOWANIE ODPOWIEDZI (Markdown):
1. Listy punktowane: u≈ºywaj my≈õlnik√≥w (-) w nowych liniach
2. Listy numerowane: 1., 2., itd. w nowych liniach  
3. Nag≈Ç√≥wki: ## dla g≈Ç√≥wnych sekcji, ### dla podsekcji
4. Pogrubienia: **tekst** dla wa≈ºnych termin√≥w
5. Wydzielaj sekcje pustymi liniami

ZASADY:
- Odpowiadaj dok≈Çadnie i rzetelnie
- Dostosuj ton do charakteru pytania  
- Je≈õli nie znasz odpowiedzi, powiedz to szczerze
- Zachowaj profesjonalizm i ≈ºyczliwo≈õƒá`;
}

/**
 * Analiza PDF z rozszerzonym my≈õleniem
 */
export async function analyzePdfWithExtendedReasoning(
  pdfText: string, 
  pdfMetadata: any, 
  query: string, 
  documentIds: string[] = [],
  enableWebSearch: boolean = true,
  enableExtendedReasoning: boolean = false
): Promise<ExtendedResponse> {
  try {
    // Pobierz tre≈õƒá dokument√≥w z biblioteki, je≈õli sƒÖ
    let documentsContext = "";
    if (documentIds.length > 0) {
      documentsContext = await getDocumentsContent(documentIds);
    }

    // Po≈ÇƒÖcz kontekst PDF i dokument√≥w z biblioteki
    let fullContext = `
## Analizowany dokument PDF:
- Tytu≈Ç: ${pdfMetadata.title || 'Nieznany'}
- Liczba stron: ${pdfMetadata.pages || 'Nieznana'}

### Zawarto≈õƒá dokumentu (fragment):
${pdfText.substring(0, 3000)}...
`;

    if (documentsContext) {
      fullContext += `\n## Dodatkowe dokumenty referencyjne:\n${documentsContext}`;
    }

    fullContext += `\n## Na podstawie powy≈ºszej zawarto≈õci, odpowiedz na pytanie:\n${query}`;
    
    if (enableExtendedReasoning) {
      fullContext += `\n\nPrzedstaw sw√≥j proces my≈õlowy w formacie JSON, a nastƒôpnie podaj finalnƒÖ odpowied≈∫.`;
    }
    
    return await getOpenAIResponseWithExtendedReasoning(
      fullContext, 
      [], 
      enableWebSearch, 
      enableExtendedReasoning
    );
    
  } catch (error) {
    console.error('B≈ÇƒÖd podczas analizy PDF z rozszerzonym my≈õleniem:', error);
    return {
      response: "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas analizy dokumentu. Spr√≥buj ponownie p√≥≈∫niej."
    };
  }
}

/**
 * Analiza Excel z rozszerzonym my≈õleniem
 */
export async function analyzeExcelWithExtendedReasoning(
  excelText: string, 
  excelMetadata: any, 
  query: string,
  documentIds: string[] = [],
  enableWebSearch: boolean = true,
  enableExtendedReasoning: boolean = false
): Promise<ExtendedResponse> {
  try {
    // Pobierz tre≈õƒá dokument√≥w z biblioteki, je≈õli sƒÖ
    let documentsContext = "";
    if (documentIds.length > 0) {
      documentsContext = await getDocumentsContent(documentIds);
    }

    // Po≈ÇƒÖcz kontekst Excel i dokument√≥w z biblioteki
    let fullContext = `
## Analizowany arkusz Excel:
- Tytu≈Ç: ${excelMetadata.title || 'Nieznany'}
- Liczba arkuszy: ${excelMetadata.sheetCount || 'Nieznana'}
- Liczba wierszy: ${excelMetadata.totalRows || 'Nieznana'}
- Liczba kolumn: ${excelMetadata.totalColumns || 'Nieznana'}

### Zawarto≈õƒá arkusza (fragment):
\`\`\`
${excelText.substring(0, 3000)}...
\`\`\`
`;

    if (documentsContext) {
      fullContext += `\n## Dodatkowe dokumenty referencyjne:\n${documentsContext}`;
    }

    fullContext += `\n## Na podstawie powy≈ºszej zawarto≈õci, odpowiedz na pytanie:\n${query}`;
    
    if (enableExtendedReasoning) {
      fullContext += `\n\nPrzedstaw sw√≥j proces my≈õlowy w formacie JSON, a nastƒôpnie podaj finalnƒÖ odpowied≈∫.`;
    }
    
    return await getOpenAIResponseWithExtendedReasoning(
      fullContext, 
      [], 
      enableWebSearch, 
      enableExtendedReasoning
    );
    
  } catch (error) {
    console.error('B≈ÇƒÖd podczas analizy Excel z rozszerzonym my≈õleniem:', error);
    return {
      response: "Przepraszam, wystƒÖpi≈Ç b≈ÇƒÖd podczas analizy arkusza Excel. Spr√≥buj ponownie p√≥≈∫niej."
    };
  }
}